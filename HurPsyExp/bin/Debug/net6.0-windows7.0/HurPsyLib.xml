<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HurPsyLib</name>
    </assembly>
    <members>
        <member name="T:HurPsyLib.Experiment">
            <summary>
            The class which represents the complete definition of a computerized psychology experiment.
            </summary>
        </member>
        <member name="F:HurPsyLib.Experiment.stimulusDict">
            <summary>
            The Dictionary collection which helps access `Stimulus` objects through their ids.
            </summary>
        </member>
        <member name="F:HurPsyLib.Experiment.locatorDict">
            <summary>
            The Dictionary collection which helps access `Locator` objects through their ids.
            </summary>
        </member>
        <member name="P:HurPsyLib.Experiment.Origin">
            <summary>
            The property which helps get/set the origin choice for the experiment.
            </summary>
        </member>
        <member name="P:HurPsyLib.Experiment.FileName">
            <summary>
            The property which helps get/set the name of the file where the experiment definition will be saved.
            </summary>
        </member>
        <member name="P:HurPsyLib.Experiment.Blocks">
            <summary>
            The list of `Block` objects which represent the trial blocks that make up the experiment.
            </summary>
        </member>
        <member name="M:HurPsyLib.Experiment.#ctor">
            <summary>
            This default constructor which starts with an empty filename and empty lists.
            </summary>
        </member>
        <member name="M:HurPsyLib.Experiment.AddStimulus(HurPsyLib.Stimulus)">
            <summary>
            The function which adds a `Stimulus` object to `stimulusDict` collection and returns on the result
            </summary>
            <param name="stim">The `Stimulus` object which will be added</param>
            <returns>A boolean flag indicating if the operation was successful</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.StimulusIdExists(System.String)">
            <summary>
            The boolean function which checks if a `Stimulus` id exists in `stimulusDict` collection. 
            </summary>
            <param name="stimId">The `Stimulus` id which will be checked</param>
            <returns>A boolean flag indicating the presence of the given id</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.ReplaceStimulusId(System.String,System.String)">
            <summary>
            The method which updates the id of a `Stimulus` object in `stimulusDict` collection.
            This method must be called when an end-user gives a `Stimulus` object a new id through an experiment design program.
            Otherwise, `stimulusDict` collection will be out of date.
            </summary>
            <param name="oldId">Previous id of the `Stimulus` object</param>
            <param name="newId">New id of the `Stimulus` object</param>
        </member>
        <member name="M:HurPsyLib.Experiment.GetStimulus(System.String)">
            <summary>
            The function which returns the `Stimulus` object with the given id
            </summary>
            <param name="stimId">The id of the `Stimulus` object which will be accessed</param>
            <returns>The `Stimulus` object with the given id</returns>
            <exception cref="T:HurPsyLib.HurPsyException">An exception will be thrown if a `Stimulus` object with the given id cannot be found.</exception>
        </member>
        <member name="M:HurPsyLib.Experiment.GetStimuli">
            <summary>
            The function which returns a new generic list of `Stimulus` objects.
            </summary>
            <returns>A generic list of all the `Stimulus` objects in the experiment definition</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.RemoveStimulus(System.String)">
            <summary>
            The method which removes the `Stimulus` object with the given id from `stimulusDict` collection.
            </summary>
            <param name="stimId">The id of the`Stimulus` object which will be removed</param>
        </member>
        <member name="M:HurPsyLib.Experiment.AddLocator(HurPsyLib.Locator)">
            <summary>
            The function which adds a `Locator` object to `locatorDict` collection and reports on the result
            </summary>
            <param name="loc">The `Locator` object which will be added to the collection.</param>
            <returns>A boolean flag indicating if the operation was successful</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.GetLocator(System.String)">
            <summary>
            The function which returns the `Locator` object with the given id
            </summary>
            <param name="locId">The id of the `Locator` object which will be accessed</param>
            <returns>The `Locator` object with the given id</returns>
            <exception cref="T:HurPsyLib.HurPsyException">An exception will be thrown if a `Locator` object with the given id cannot be found.</exception>
        </member>
        <member name="M:HurPsyLib.Experiment.GetLocators">
            <summary>
            The function which returns a new generic list of `Locator` objects.
            </summary>
            <returns>A generic list of all the `Locator` objects in the experiment definition</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.RemoveLocator(System.String)">
            <summary>
            The method which removes the `Locator` object with the given id from `locatorDict` collection.
            </summary>
            <param name="locId">The id of the `Locator` object which will be removed</param>
        </member>
        <member name="M:HurPsyLib.Experiment.LocatorIdExists(System.String)">
            <summary>
            The boolean function which checks whether a `Locator` id exists in `locatorDict` collection.
            </summary>
            <param name="locId"></param>
            <returns>A boolean flag indicating the presence of the given id</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.ReplaceLocatorId(System.String,System.String)">
            <summary>
            The method which updates the id of a `Locator` object in `locatorDict` collection.
            This method must be called when an end-user gives a `Locator` object a new id through an experimental design program.
            Otherwise, `locatorDict` collection will be out of date.
            </summary>
            <param name="oldId">Previous id of the `Locator` object</param>
            <param name="newId">New id of the `Locator` object</param>
        </member>
        <member name="M:HurPsyLib.Experiment.AddNewBlock">
            <summary>
            The function which adds a newly created trial block to `Blocks` collection and returns a reference to it
            </summary>
            <returns>A reference to the newly added `Block` object</returns>
        </member>
        <member name="M:HurPsyLib.Experiment.RemoveBlock(HurPsyLib.Block)">
            <summary>
            The method which removes a `Block` objects from `Blocks` collection.
            </summary>
            <param name="blck">The `Block` object which will be removed</param>
        </member>
        <member name="M:HurPsyLib.Experiment.SaveToXml(System.String)">
            <summary>
            The method which saves the experiment definition to an XML file using a `DataContractSerializer`
            </summary>
            <param name="fileName">The name of the XML file</param>
        </member>
        <member name="M:HurPsyLib.Experiment.LoadFromXml(System.String)">
            <summary>
            The function which loads an experiment definition from an XML file by using a `DataContractSerializer`
            </summary>
            <param name="fileName">The name of the XML file</param>
            <returns>The `Experiment` object which contains the experiment definition loaded from the file</returns>
            <exception cref="T:HurPsyLib.HurPsyException">An exception will be thrown if a valid definition of an experiment could not be loaded from the file.</exception>
        </member>
        <member name="T:HurPsyLib.StimulusLocatorPair">
            <summary>
            The class which associates a `Stimulus` object with a `Locator` object by pairing their ids.
            Any such pairing which appears in a `Step` object representing a trial step will help display a stimulus at the position specified by the associated locator.
            </summary>
        </member>
        <member name="P:HurPsyLib.StimulusLocatorPair.StimulusId">
            <summary>
            The `Stimulus` id making up the pair.
            </summary>
        </member>
        <member name="P:HurPsyLib.StimulusLocatorPair.LocatorId">
            <summary>
            The `Locator` id making up the pair.
            </summary>
        </member>
        <member name="M:HurPsyLib.StimulusLocatorPair.#ctor">
            <summary>
            This default constructor creates an id pair with empty id strings.
            </summary>
        </member>
        <member name="M:HurPsyLib.StimulusLocatorPair.#ctor(System.String,System.String)">
            <summary>
            This parametrized constructor creates a pair of given ids.
            </summary>
            <param name="stimId">The `Stimulus` id of the pair</param>
            <param name="locId">The `Locator` id of the pair</param>
        </member>
        <member name="T:HurPsyLib.Step">
            <summary>
            The class which represents a step in an experimental trial.
            It contains information on which stimuli will be presented together, at which locations and for how long.
            </summary>
        </member>
        <member name="P:HurPsyLib.Step.StimulusLocators">
            <summary>
            The list of `StimulusLocatorPair` objects which represent the stimuli which will be presented together and their locators which will specify stimuli's locations.
            </summary>
        </member>
        <member name="P:HurPsyLib.Step.StepTime">
            <summary>
            The display time period for this step
            </summary>
        </member>
        <member name="M:HurPsyLib.Step.#ctor">
            <summary>
            This default constructor starts with an empty list of stimulus-locator pairs and zero display time.
            </summary>
        </member>
        <member name="M:HurPsyLib.Step.AddStimulusLocatorPair(HurPsyLib.StimulusLocatorPair)">
            <summary>
            The function which adds a stimulus-locator paitr to `StimulusLocators` list and returns its reference
            </summary>
            <param name="newpair">The `StimulusLocatorPair` object which will be added to list (by default, it will be null, if an empty one should be created)</param>
            <returns>The reference to the newly added `StimulusLocatorPair` object</returns>
        </member>
        <member name="M:HurPsyLib.Step.AddStimulusLocatorPairs(HurPsyLib.StimulusLocatorPair[])">
            <summary>
            The method which adds a collection of `StimulusLocatorPair` objects
            </summary>
            <param name="newpairs">The list of `StimulusLocatorPair` objects which will be added</param>
        </member>
        <member name="M:HurPsyLib.Step.ChangeStimulusId(System.String,System.String)">
            <summary>
            The method which updates a `Stimulus` id in the pairs making up this step
            </summary>
            <param name="oldId">The old id</param>
            <param name="newId">The new id</param>
        </member>
        <member name="M:HurPsyLib.Step.ChangeLocatorId(System.String,System.String)">
            <summary>
            The method which updates a `Locator` id in the pairs making up this step
            </summary>
            <param name="oldId">The old id</param>
            <param name="newId">The new id</param>
        </member>
        <member name="M:HurPsyLib.Step.RemoveStimulusId(System.String)">
            <summary>
            The method which removes pairs containing a deleted `Stimulus` id
            </summary>
            <param name="removedId">The id of the deleted `Stimulus` object</param>
        </member>
        <member name="M:HurPsyLib.Step.RemoveLocatorId(System.String)">
            <summary>
            The method which removes pairs containing a deleted `Locator` id
            </summary>
            <param name="removedId">The id of the deleted `Locator` object</param>
        </member>
        <member name="T:HurPsyLib.Trial">
            <summary>
            The class which represents an experimental trial as a collection of `Step` objects representing successive steps where groups of stimuli are presented together
            </summary>
        </member>
        <member name="P:HurPsyLib.Trial.Steps">
            <summary>
            The collection of `Step` objects representing successive steps making up the trial
            </summary>
        </member>
        <member name="P:HurPsyLib.Trial.IsFixed">
            <summary>
            The boolean flag which indicates whether this trial's order in the block is fixed
            </summary>
        </member>
        <member name="M:HurPsyLib.Trial.#ctor">
            <summary>
            This default constructor starts with an empty list of steps and unfixed order number
            If true, the trial represented by the object will not be affected by shuffling of trials.
            </summary>
        </member>
        <member name="M:HurPsyLib.Trial.AddStep(HurPsyLib.Step)">
            <summary>
            The function which adds a `Step` object to the collection of steps and returns a reference to it
            </summary>
            <param name="newstep">The `Step` object which will be added (null by default, if a new `Step` object must be created and added)</param>
            <returns>The newly added object</returns>
        </member>
        <member name="M:HurPsyLib.Trial.ChangeStimulusId(System.String,System.String)">
            <summary>
            The method which updates the id of a `Stimulus` object by scanning through `Steps` collection
            </summary>
            <param name="oldId">The old stimulus id</param>
            <param name="newId">The new stimulus id</param>
        </member>
        <member name="M:HurPsyLib.Trial.ChangeLocatorId(System.String,System.String)">
            <summary>
            The method which updates the id of a `Locator` object by scanning through `Steps` collection
            </summary>
            <param name="oldId">The old locator id</param>
            <param name="newId">The new locator id</param>
        </member>
        <member name="M:HurPsyLib.Trial.RemoveStimulusId(System.String)">
            <summary>
            The method which scans through the steps referring to a deleted `Stimulus` id
            </summary>
            <param name="removedId">The id of the deleted `Stimulus` object</param>
        </member>
        <member name="M:HurPsyLib.Trial.RemoveLocatorId(System.String)">
            <summary>
            The method which scans through the steps referring to a deleted `Locator` id
            </summary>
            <param name="removedId">The id of the deleted `Locator` object</param>
        </member>
        <member name="T:HurPsyLib.Block">
            <summary>
            The class which represents a block of experimental trials as a collection of `Trial` objects.
            </summary>
        </member>
        <member name="F:HurPsyLib.Block.blockCount">
            <summary>
            The static variable through which the class keeps count of `Block` objects
            (as of September 23rd, 2024, I can't remember the reason that made this count necessary)
            </summary>
        </member>
        <member name="P:HurPsyLib.Block.Name">
            <summary>
            The string which will hold the hopefully-identifying name given to the block by the designer of the experiment.
            </summary>
        </member>
        <member name="P:HurPsyLib.Block.Trials">
            <summary>
            The collection of `Trial` objects representing expewrimental trials
            </summary>
        </member>
        <member name="P:HurPsyLib.Block.MustShuffleTrials">
            <summary>
            The boolean flag which indicates whether the trials (except the fixed ones) making up the block must be shuffled before every run of the experiment.
            </summary>
        </member>
        <member name="M:HurPsyLib.Block.#ctor">
            <summary>
            This default constructor starts with a temporary but unique block id as the name and empty list of trials.
            </summary>
        </member>
        <member name="M:HurPsyLib.Block.AddTrial(HurPsyLib.Trial)">
            <summary>
            The function which adds a `Trial` object to the list of trials and returns a reference to it
            </summary>
            <param name="newtrial">The `Trial` object which will be added (null by default, if a new object must be created and added)</param>
            <returns>The reference to the newly added object</returns>
        </member>
        <member name="M:HurPsyLib.Block.ShuffleTrials">
            <summary>
            The method which shuffles the order of trials (excluding the fixed ones) making up the block
            </summary>
        </member>
        <member name="M:HurPsyLib.Block.ChangeStimulusId(System.String,System.String)">
            <summary>
            The method which updates the id of a `Stimulus` object by scanning through `Trials` collection
            </summary>
            <param name="oldId">The old stimulus id</param>
            <param name="newId">The new stimulus id</param>
        </member>
        <member name="M:HurPsyLib.Block.ChangeLocatorId(System.String,System.String)">
            <summary>
            The method which updates the id of a `Locator` object by scanning through `Trials` collection
            </summary>
            <param name="oldId">The old locator id</param>
            <param name="newId">The new locator id</param>
        </member>
        <member name="M:HurPsyLib.Block.RemoveStimulusId(System.String)">
            <summary>
            The method which scans through the trials referring to a deleted `Stimulus` id
            </summary>
            <param name="removedId">The id of the deleted `Stimulus` object</param>
        </member>
        <member name="M:HurPsyLib.Block.RemoveLocatorId(System.String)">
            <summary>
            The method which scans through the trials referring to a deleted `Locator` id
            </summary>
            <param name="removedId">The id of the deleted `Locator` object</param>
        </member>
        <member name="T:HurPsyLib.HtmlStimulus">
            <summary>
            This class in intended to represents a viewbox displaying the contents of an HTML file.
            It implements the VisualStimulus interface because the stimulus will appear as a visual box displaying some information or instructions.
            </summary>
        </member>
        <member name="M:HurPsyLib.HtmlStimulus.#ctor">
            <summary>
            This default constructor starts with a size which will be valid in case an experiment designer has not set any size.
            </summary>
        </member>
        <member name="T:HurPsyLib.HurPsyUnit">
            <summary>
            This enum contains the allowed unit choices which will be used with  stimulus locations and sizes
            </summary>
        </member>
        <member name="F:HurPsyLib.HurPsyUnit.MM">
            <summary>
            The default unit choice is millimeter, but more choices may become available as `HurPsyLib` is developed
            </summary>
        </member>
        <member name="T:HurPsyLib.HurPsyOrigin">
            <summary>
            This enum contains the allowed origin preferences when specifying stimulus locations and anchor points for visual stimulus rectangles
            </summary>
        </member>
        <member name="F:HurPsyLib.HurPsyOrigin.MiddleCenter">
            <summary>
            The default origin choice is middle of the viewbox or the midpoint of any visual rectangle; other choices may become available in the future
            </summary>
        </member>
        <member name="T:HurPsyLib.HurPsyPoint">
            <summary>
            This class represents a point object to specify the position of a visual stimulus or its anchor point.
            Its whole point is to keep `HurPsyLib` objects independent of the GUIs used for designing or running experiments.
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsyPoint.X">
            <summary>
            Horizontal position in a right-handed Cartesian coordinate system
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsyPoint.Y">
            <summary>
            Vertical position in a right-handed Cartesian coordinate system
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsyPoint.Unit">
            <summary>
            The property to bget/set the unit choice; it will be fully utilized when more unit choices become available
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsyPoint.#ctor">
            <summary>
            This default constructor starts with zero positions
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsyPoint.#ctor(System.Double,System.Double)">
            <summary>
            This parametrized constructor accepts initial positions
            </summary>
            <param name="pX">Initial horizontal position</param>
            <param name="pY">Initial vertical position</param>
        </member>
        <member name="M:HurPsyLib.HurPsyPoint.ShallowCopy">
            <summary>
            The method for constructing a temporary copy of this instance; it helps avoid accidentally modifying the original location point after copying it for various purposes
            </summary>
            <returns></returns>
        </member>
        <member name="T:HurPsyLib.HurPsySize">
            <summary>
            This class represents a size object to specify the dimensions of a visual stimulus.
            Its whole point is to keep `HurPsyLib` objects independent of the GUIs used for designing or running experiments.
            </summary>
        </member>
        <member name="F:HurPsyLib.HurPsySize.sizeX">
            <summary>
            Horizontal size
            </summary>
        </member>
        <member name="F:HurPsyLib.HurPsySize.sizeY">
            <summary>
            Vertical size
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsySize.Unit">
            <summary>
            The property to get/set the unit choice; it will be fully utilized when more unit choices become available
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsySize.#ctor">
            <summary>
            This default constructor starts with zero dimensions
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsySize.#ctor(System.Double,System.Double)">
            <summary>
            This parametrized constructor accepts initial dimensions
            </summary>
            <param name="sX"></param>
            <param name="sY"></param>
        </member>
        <member name="P:HurPsyLib.HurPsySize.Width">
            <summary>
            The property to get/set the horizontal dimension (an exception will be thrown for a negative value)
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsySize.Height">
            <summary>
            The property to get/set the vertical dimension (an exception will be thrown for a negative value)
            </summary>
        </member>
        <member name="T:HurPsyLib.HurPsyTimePeriod">
            <summary>
            The class which encapculates information about a time period, independent of the OS where an expperiment is designed or run.
            </summary>
        </member>
        <member name="F:HurPsyLib.HurPsyTimePeriod.period">
            <summary>
            The `TimeSpan` value which contains the actual time period information
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsyTimePeriod.#ctor">
            <summary>
            This default constructor starts with zero time period
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsyTimePeriod.Milliseconds">
            <summary>
            This property helps get the milliseconds equivalent of the time period or set it with a value in units of milliseconds (An exception will be thrown in case of a negative value)
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsyTimePeriod.Seconds">
            <summary>
            This property helps get the seconds equivalent of the time period or set it with a value in units of seconds (An exception will be thrown in case of a negative value)
            </summary>
        </member>
        <member name="P:HurPsyLib.HurPsyTimePeriod.Span">
            <summary>
            This property provides direct access to the `TimeSpan` value in a runtime environment where .NET is available
            </summary>
        </member>
        <member name="T:HurPsyLib.HurPsyException">
            <summary>
            Customary specialized Exception class
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsyException.#ctor(System.String)">
            <summary>
            This parametrized constructor lets the base class initialize the error message
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="T:HurPsyLib.HurPsyCommon">
            <summary>
            This static class serves as a container for global objects utilized by all the `HurPsyLib` objects 
            </summary>
        </member>
        <member name="F:HurPsyLib.HurPsyCommon.Rnd">
            <summary>
            The pseudo-random number generator shared by HurPsyLib` objects
            </summary>
        </member>
        <member name="M:HurPsyLib.HurPsyCommon.GetObjectGuid(System.Object)">
            <summary>
            This function returns a temporfary unique id generated with the type name of any object
            </summary>
            <param name="obj">The object which needs the temporary unique id</param>
            <returns></returns>
        </member>
        <member name="T:HurPsyLib.ImageStimulus">
            <summary>
            This class is intended to represent an image served as a visual stimulus (hence it implements the VisualStimulus interface)
            </summary>
        </member>
        <member name="M:HurPsyLib.ImageStimulus.#ctor">
            <summary>
            This default constructor starts with an image size of 10 mm by 10 mm (didn't want to cause surprise by starting with zero size)
            </summary>
        </member>
        <member name="T:HurPsyLib.Locator">
            <summary>
            The abstract class which serves as the blueprint for all classes which will help position experimental stimuli according to their own rules
            </summary>
        </member>
        <member name="P:HurPsyLib.Locator.Id">
            <summary>
            `Id` will serve as a uniquely identifying string for each instance
            </summary>
        </member>
        <member name="M:HurPsyLib.Locator.#ctor">
            <summary>
            This default constructor will assign a temporary unique id to every instance, one based on its type
            </summary>
        </member>
        <member name="M:HurPsyLib.Locator.GetLocation(HurPsyLib.VisualStimulus)">
            <summary>
            Derived classes will have to implement this function to specify a location for a visual stimulus
            </summary>
            <param name="vistim">The visual stimulus which will be positioned according to the outcome</param>
            <returns>The position specified for the visual stimulus</returns>
        </member>
        <member name="T:HurPsyLib.PointLocator">
            <summary>
            This class represents a single-point locator
            </summary>
        </member>
        <member name="P:HurPsyLib.PointLocator.LocatorPoint">
            <summary>
            The location point
            </summary>
        </member>
        <member name="M:HurPsyLib.PointLocator.#ctor">
            <summary>
            This default constructor starts with a point location at the origin (normally at the center of the screen)
            </summary>
        </member>
        <member name="M:HurPsyLib.PointLocator.#ctor(System.Double,System.Double)">
            <summary>
            This parametrized constructor accepts the coordinates of a point
            </summary>
            <param name="locX">The horizontal position of the location point</param>
            <param name="locY">The vertical position of the location point</param>
        </member>
        <member name="M:HurPsyLib.PointLocator.GetLocation(HurPsyLib.VisualStimulus)">
            <summary>
            The required implementation of the function inherited from the abstracxt base class simply specific the inner location point as the stimulus location
            </summary>
            <param name="vistim">The visual stimulus which will be positioned by this locator instance</param>
            <returns>A tempotrary copy of the inner location point, so that subsequent operations will not modify `LocatorPoint`</returns>
        </member>
        <member name="T:HurPsyLib.RectangleLocator">
            <summary>
            This class is for positioning a visual stimulus in a rectangular area
            </summary>
        </member>
        <member name="P:HurPsyLib.RectangleLocator.RectangleLocation">
            <summary>
            The anchor point of the positioning rectangle (taken to be the center of the rectangle due to the default origin choice)
            Note that extra code might have to be written if more origin choices are implemented in the `HurPsyOrigin` enumeration.
            </summary>
        </member>
        <member name="P:HurPsyLib.RectangleLocator.RectangleSize">
            <summary>
            The size of the positioning rectangle
            </summary>
        </member>
        <member name="M:HurPsyLib.RectangleLocator.#ctor">
            <summary>
            This default constructor creates a zero-size rectangle at the origin point
            </summary>
        </member>
        <member name="M:HurPsyLib.RectangleLocator.GetLocation(HurPsyLib.VisualStimulus)">
            <summary>
            The required implementation of the function inherited from the abstract base class will specify a randomized position within the underlying rectangle
            </summary>
            <param name="vistim">The visual stimulus which will be positioned by this locator instance</param>
            <returns>A randomized location within the underlying rectangle (with the guarantee that the visual stoimulus will not extend beyond that rectangle)</returns>
        </member>
        <member name="T:HurPsyLib.Stimulus">
            <summary>
            The abstract class which serves as the blueprint for all classes which will represent different types of experimental stimuli
            </summary>
        </member>
        <member name="P:HurPsyLib.Stimulus.Id">
            <summary>
            `Id` will serve as a uniquely identifying string for each instance
            </summary>
        </member>
        <member name="P:HurPsyLib.Stimulus.FileName">
            <summary>
            `FileName` will contain the full path of the file containing the actual Stimulus object
            </summary>
        </member>
        <member name="M:HurPsyLib.Stimulus.#ctor">
            <summary>
            Every instance of any class representing an experimental stimulus will start with a temporary unique id and an empty filename
            </summary>
        </member>
        <member name="T:HurPsyLib.VisualStimulus">
            <summary>
            This abstract class will be the basis for all classes which will represent visual stimuli.
            (It was first designed to be an interface, but that required all derived classes to keep their size and anchor information separately, so I turned it to an abstract class)
            </summary>
        </member>
        <member name="P:HurPsyLib.VisualStimulus.VisualSize">
            <summary>
            Any object representing a visual stimulus must have a property to get/set the stimulus size
            (which has a unit of millimeters, by default)
            </summary>
        </member>
        <member name="P:HurPsyLib.VisualStimulus.AnchorChoice">
            <summary>
            Any object representing a visual stimulus must have a property to get/set its preferred anchor point
            (which is the middle center of the strimulus object, by default)
            </summary>
        </member>
        <member name="M:HurPsyLib.VisualStimulus.#ctor">
            <summary>
            This default constructor starts with an empty (zero) size
            </summary>
        </member>
    </members>
</doc>
