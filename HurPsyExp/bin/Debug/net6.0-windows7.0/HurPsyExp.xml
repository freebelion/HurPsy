<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HurPsyExp</name>
    </assembly>
    <members>
        <member name="T:HurPsyExp.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:HurPsyExp.App.Application_Startup(System.Object,System.Windows.StartupEventArgs)">
            <summary>
            The handler function for the application's Startup event.
            At this stage, the application will let the user choose whether to design an experiment, or run an experiment.
            Depending on the user choice, an instance of `ExpDesign.DesignWindow` or `ExpRun.RunWindow` will be opened.
            This is an implementation based on a tutorial found at:
            https://wpf-tutorial.com/wpf-application/working-with-app-xaml/
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HurPsyExp.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:HurPsyExp.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:HurPsyExp.AddTrialDialog">
            <summary>
            Interaction logic for AddTrialDialog.xaml
            </summary>
            <summary>
            AddTrialDialog
            </summary>
        </member>
        <member name="M:HurPsyExp.AddTrialDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.BlockView">
            <summary>
            Interaction logic for BlockView.xaml
            </summary>
            <summary>
            BlockView
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.BlockView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.DesignViewModel">
            <summary>
            This VM class will handle the exchange of data input on the experiment design interface
            </summary>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel._experiment">
            <summary>
            The reference variable for the object representing the experiment's definition
            </summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.StimulusVMs">
            <summary>
            Observable collection of the viewmodels which will help edit/display stimulus definitions
            </summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.LocatorVMs">
            <summary>
            Observable collection of the viewmodels which will help edit/display locator definitions
            </summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.BlockVMs">
            <summary>
            Observable collection of the viewmodels which will help edit/display trial blocks
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.#ctor">
            <summary>
            This default constructor starts with empty lists of the inner viewmodel objects
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.ClearVMs">
            <summary>
            This private method clears all lists of viewmodel objects before loading or starting a new experiment definition.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.NewExperiment">
            <summary>
            The method which will create a new experiment definition when the associated command is executed
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.LoadExperiment">
            <summary>
            The method which will load an experiment definition from a file when the associated command is executed
            (Choosing the definition file and loading of the experiment is left to `Utility.LoadExperiment()` method because it depends on the runtime environment)
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.SaveExperiment">
            <summary>
            The method which will save an experiment definition to a file when the associated command is executed
            (Creating the definition file and saving the experiment definition is left to `Utility.SaveExperiment()` method because it depends on the runtime environment)
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.SelectImages">
            <summary>
            The method which will load image stimuli from files selected by the user when the associated command is executed.
            (Choosing the image files is left to the `Utility.OpenFiles()` method, because it depends on the runtime environment)
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.AddHtmlStimulus">
            <summary>
            The method which will load and HTML stimulus from a file selected by the user when the associated command is executed.
            (Choosing the file is left to the `Utility.OpenFiles()` method, because it depends on the runtime environment)
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.AddStimulusVM(HurPsyLib.Stimulus)">
            <summary>
            Create and add a viewmodel object associated with a `Stimulus` object
            </summary>
            <param name="stim"></param>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.StimVM_IdChanged(System.Object,HurPsyExp.ExpDesign.IdChangeEventArgs)">
            <summary>
            This method will handle the `IdChanged` events for `StimulusVM` objects
            </summary>
            <param name="sender">The object reporting the id change</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.AddPointLocator">
            <summary>
            This method will create and add a `PointLocator` object to the experiment definition
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.AddLocatorVM(HurPsyLib.Locator)">
            <summary>
            This method will create and add a viewmodel object associated with a `Locator` object
            </summary>
            <param name="loc"></param>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.LocVM_IdChanged(System.Object,HurPsyExp.ExpDesign.IdChangeEventArgs)">
            <summary>
            This method will handle the `IdChanged` events for `LocatorVM` objects
            </summary>
            <param name="sender">The object reporting the id change</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.DeleteStimulus">
            <summary>
            This method which delete the `Stimulus` objects selected on the experiment design interface when the associated command is executed.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.DeleteLocator">
            <summary>
            This method which delete the `Locator` objects selected on the experiment design interface when the associated command is executed.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.AddBlock">
            <summary>
            This method will create and add a block of trials to the experiment definition when the associated command is executed.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignViewModel.DeleteBlock">
            <summary>
            This method will deleted a block of trials selected on the experiment design interface when the associated command is executed.
            </summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.newExperimentCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.NewExperimentCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.NewExperimentCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.NewExperiment"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.loadExperimentCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.LoadExperimentCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.LoadExperimentCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.LoadExperiment"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.saveExperimentCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.SaveExperimentCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.SaveExperimentCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.SaveExperiment"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.selectImagesCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.SelectImagesCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.SelectImagesCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.SelectImages"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.addHtmlStimulusCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.AddHtmlStimulusCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.AddHtmlStimulusCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.AddHtmlStimulus"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.addPointLocatorCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.AddPointLocatorCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.AddPointLocatorCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.AddPointLocator"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.deleteStimulusCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.DeleteStimulusCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.DeleteStimulusCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.DeleteStimulus"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.deleteLocatorCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.DeleteLocatorCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.DeleteLocatorCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.DeleteLocator"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.addBlockCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.AddBlockCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.AddBlockCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.AddBlock"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.DesignViewModel.deleteBlockCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.DesignViewModel.DeleteBlockCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.DesignViewModel.DeleteBlockCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.DesignViewModel.DeleteBlock"/>.</summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.DesignWindow">
            <summary>
            This class definition describes the interaction logic for `DesignWindow.xaml`,
            which is currently no behavior, because all user interactions are handled by commands forwarded to the associated viewmodel.
            </summary>
            <summary>
            DesignWindow
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.DesignWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.ElementsPanel">
            <summary>
            Interaction logic for ElementsPanel.xaml
            </summary>
            <summary>
            ElementsPanel
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.ElementsPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.ExperimentPanel">
            <summary>
            Interaction logic for ExperimentPanel.xaml
            </summary>
            <summary>
            ExperimentPanel
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpDesign.ExperimentPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.ItemViewModel">
            <summary>
            This abstract class is the base of viewmodel classes
            which simply wrap certain model objects.
            It has the ability to toggle a boolean property Selected
            and a TempId property to serve as a proxy
            for the Id properties of Stimulus and Locator objects.
            </summary>
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="P:HurPsyExp.ExpDesign.ItemViewModel.TempId">
            <inheritdoc cref="F:HurPsyExp.ExpDesign.ItemViewModel.tempId"/>
        </member>
        <member name="P:HurPsyExp.ExpDesign.ItemViewModel.Selected">
            <inheritdoc cref="F:HurPsyExp.ExpDesign.ItemViewModel.selected"/>
        </member>
        <member name="P:HurPsyExp.ExpDesign.ItemViewModel.Editable">
            <inheritdoc cref="F:HurPsyExp.ExpDesign.ItemViewModel.editable"/>
        </member>
        <member name="P:HurPsyExp.ExpDesign.ItemViewModel.ItemObject">
            <inheritdoc cref="F:HurPsyExp.ExpDesign.ItemViewModel.itemObject"/>
        </member>
        <member name="M:HurPsyExp.ExpDesign.ItemViewModel.OnTempIdChanged(System.String)">
            <summary>Executes the logic for when <see cref="P:HurPsyExp.ExpDesign.ItemViewModel.TempId"/> just changed.</summary>
            <param name="value">The new property value that was set.</param>
            <remarks>This method is invoked right after the value of <see cref="P:HurPsyExp.ExpDesign.ItemViewModel.TempId"/> is changed.</remarks>
        </member>
        <member name="F:HurPsyExp.ExpDesign.ItemViewModel.toggleSelectCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.ItemViewModel.ToggleSelectCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.ItemViewModel.ToggleSelectCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.ItemViewModel.ToggleSelect"/>.</summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.BlockItemViewModel">
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="F:HurPsyExp.ExpDesign.BlockItemViewModel.addingTrialCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.BlockItemViewModel.AddingTrialCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.BlockItemViewModel.AddingTrialCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand`1"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.BlockItemViewModel.AddingTrial(System.Windows.Controls.Expander)"/>.</summary>
        </member>
        <member name="F:HurPsyExp.ExpDesign.BlockItemViewModel.addStepCommand">
            <summary>The backing field for <see cref="P:HurPsyExp.ExpDesign.BlockItemViewModel.AddStepCommand"/>.</summary>
        </member>
        <member name="P:HurPsyExp.ExpDesign.BlockItemViewModel.AddStepCommand">
            <summary>Gets an <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand"/> instance wrapping <see cref="M:HurPsyExp.ExpDesign.BlockItemViewModel.AddStep"/>.</summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.IdSelection">
            <inheritdoc/>
        </member>
        <member name="P:HurPsyExp.ExpDesign.IdSelection.Selected">
            <inheritdoc cref="F:HurPsyExp.ExpDesign.IdSelection.selected"/>
        </member>
        <member name="P:HurPsyExp.ExpDesign.IdSelection.Id">
            <inheritdoc cref="F:HurPsyExp.ExpDesign.IdSelection.id"/>
        </member>
        <member name="T:HurPsyExp.ExpDesign.TempStep">
            <summary>
            This class will serve as a boilerplate for one or more steps
            that an experiment designer wants to add to a trial.
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpDesign.TempTrial">
            <summary>
            This class will serve as a boilerplate for one or more trials
            that an experiment designer wants to add to a block.
            When the designer presses the "Add Trial(s)" button on AddTrialView,
            trials with the steps formed by combinations of desired pairs
            will be added to the active block.
            </summary>
        </member>
        <member name="T:HurPsyExp.ExpRun.StimulusViewModel">
            <inheritdoc/>
        </member>
        <member name="P:HurPsyExp.ExpRun.StimulusViewModel.Hidden">
            <inheritdoc cref="F:HurPsyExp.ExpRun.StimulusViewModel.hidden"/>
        </member>
        <member name="T:HurPsyExp.ExpRun.RunWindow">
            <summary>
            This class definition describes the interaction logic for `RunWindow.xaml`.
            </summary>
            <summary>
            RunWindow
            </summary>
        </member>
        <member name="F:HurPsyExp.ExpRun.RunWindow.stepTimer">
            <summary>
            This timer will be used to display timed steps.
            </summary>
        </member>
        <member name="P:HurPsyExp.ExpRun.RunWindow.RunVM">
            <summary>
            The viewmodel object will be responsible for advancing through trial steps, trials and blocks.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.#ctor">
            <summary>
            This default constructor will initialize this window's components, create the viewmodel object and specify the event handler for the timer
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.Window_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The asssociated viewmodel object will start running the experiment as soon as this window is loaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.DisplayCurrentStep">
            <summary>
            This little function will display the current trial step.
            Currently, it assumes every step will be on display for a specific period of time,
            but there may be cases a display time is not specified because the current step may need to stay on display until an acceptable response is given.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.StepTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            This method handles the timer's `Tick` event and takes the necessary actions to end the current step.
            </summary>
            <param name="sender">The object firing the event (which is `stepTimer`)</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.StepEnded">
            <summary>
            This method performs the end-of-step operations.
            </summary>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.WebBrowser_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method handles the `Loaded` event of the `WebBrowser control, which will be come onto the screen if a `HtmlStimulus` is to be displayed.
            </summary>
            <param name="sender">The object firing the event (which the `WebBrowser` control)</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.Image_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method handles the `Loaded` event of an `Image` control, which will be come onto the screen if an `ImageStimulus` is to be displayed.
            </summary>
            <param name="sender"></param>
            <param name="e">Additional event info</param>
            <exception cref="T:HurPsyLib.HurPsyException">The object firing the event (which the `Image` control)</exception>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.Window_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            This method will handle the `KeyDown` events if the current step requires a key response.
            </summary>
            <param name="sender">The object firing the event (which is any key on the keyboard)</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.ExpRun.RunWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.StartupDialog">
            <summary>
            This class definition defines the interaction logic for `StartupDialog.xaml`.
            It contains the event handlers which display the design window or the run window, depending on the user's choice.
            </summary>
            <summary>
            StartupDialog
            </summary>
        </member>
        <member name="M:HurPsyExp.StartupDialog.#ctor">
            <summary>
            The usual default constructor simply calls the component initializer.
            </summary>
        </member>
        <member name="M:HurPsyExp.StartupDialog.DesignExperiment(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            If an experiment is to be designed, a design window is displayed and takes over the rest.
            </summary>
            <param name="sender">The object firing the event (the radio button for the "Design an Experiment" choice)</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.StartupDialog.RunExperiment(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            If an experiment is to be designed, a run window is displayed and takes over the rest.
            </summary>
            <param name="sender">The object firing the event (the radio button for the "Run an Experiment" choice)</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:HurPsyExp.StartupDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:HurPsyExp.Utility">
            <summary>
            This static class will handle mundane operations like opening and saving files, etc. which fall outside the jurisdiction of the design app.
            </summary>
        </member>
        <member name="F:HurPsyExp.Utility.MM2DIU">
            <summary>
            Millimeters to DIU conversion ratio
            </summary>
        </member>
        <member name="F:HurPsyExp.Utility.Rnd">
            <summary>
            The pseudo-random number generator which will be used while an experiment runs
            </summary>
        </member>
        <member name="M:HurPsyExp.Utility.OpenFiles(System.String,System.Boolean)">
            <summary>
            This function will open a open-file selection dialog and return the selected files' paths as an array of strings
            </summary>
            <param name="filenameFilter">The filename filter for the file selection dialog</param>
            <param name="openMultiple">The boolean flag indicating if multiple selections are permitted</param>
            <returns></returns>
        </member>
        <member name="M:HurPsyExp.Utility.FileSaveName(System.String)">
            <summary>
            This function will open a save-file selection dialog and return the selected file' path as a string
            </summary>
            <param name="filenameFilter">The filename filter for the file selection dialog</param>
            <returns></returns>
        </member>
        <member name="T:HurPsyExp.Utility.PermList`1">
            <summary>
            This privately nested class will help permutation lists for a list of objects
            </summary>
            <typeparam name="T">The generic type of the objects to be permuted</typeparam>
        </member>
        <member name="M:HurPsyExp.Utility.GetPermutations``1(System.Collections.Generic.List{``0}[])">
            <summary>
            This function will return a list of permuted arrays constructed from an indeterminate number of arrays which come as parameters
            </summary>
            <typeparam name="T">Generic type of objects which will be permuted</typeparam>
            <param name="arrays">The list of object arrays to be permuted</param>
            <returns></returns>
        </member>
        <member name="M:HurPsyExp.Utility.GetPermutations``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            This function will return a list of permuted arrays constructed from a list of objects which come as a parameter
            </summary>
            <typeparam name="T">Generic type of objects which will be permuted</typeparam>
            <param name="lists">The list of object lists to be permuted</param>
            <returns></returns>
        </member>
        <member name="M:HurPsyExp.Utility.LoadExperiment">
            <summary>
            This function will display an open-file dialog and load an experiment definition (if a valid one can be constructed) from the selected file
            </summary>
            <returns>The reference of the `Experiment` object (`null` if a valid definition could not be constructed)</returns>
        </member>
        <member name="M:HurPsyExp.Utility.SaveExperiment(HurPsyLib.Experiment)">
            <summary>
            This method will display a save-file dialog and save the given experiment definition into the specified file.
            </summary>
            <param name="exp">The experiment definition which will be saved</param>
        </member>
        <member name="M:HurPsyExp.Utility.CopyStimulusFile(HurPsyLib.Stimulus,System.String)">
            <summary>
            This method will copy the file containing a stimulus definition to the directory where the experiment files are kept.
            (This helps package all files pertaining to an experiment and share with other experimenters, so they can run the experiment after extracting all those files into the same directory)
            </summary>
            <param name="stim">The `Stimulus` object representing the stimulus</param>
            <param name="expDirectoryPath">The full path of the directory where the experiment files are kept</param>
            <returns></returns>
        </member>
        <member name="M:HurPsyExp.Utility.FindStimulusFile(HurPsyLib.Stimulus,System.String)">
            <summary>
            This method will try to locate a file containing the definition of a stimulus.
            (If the stimulus could not be recovered from the file path recorded in its definition, maybe because the experiment definiton was shared or moved to a different location, this method will look into the directory containing the experiment definition)
            </summary>
            <param name="stim">The `Stimulus` object representing the stimulus</param>
            <param name="expDirectoryPath">The full path of the directory where the experiment files are kept</param>
            <exception cref="T:HurPsyLib.HurPsyException"></exception>
        </member>
        <member name="M:HurPsyExp.Utility.SaveImage(System.Windows.Media.Imaging.BitmapImage,System.String)">
            <summary>
            This method will save a bitmap image into the file at the given path.
            </summary>
            <param name="bmpimg">The bitmap image object</param>
            <param name="filePath">The path of the file where the image will be saved</param>
        </member>
        <member name="M:HurPsyExp.Utility.LoadImage(System.String)">
            <summary>
            This function will load and return a bitmap image from the file at the given path
            </summary>
            <param name="filename">The path of the file containing the image</param>
            <returns>The image object</returns>
        </member>
        <member name="M:HurPsyExp.Utility.LoadObjectFromXml``1(System.String)">
            <summary>
            This function will load a generic object with a given type from an XML file by using a `DataContractSerializer`
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="fileName">The path of the XML file containing the object structure</param>
            <returns>The object loaded from the file (`null` if no valid object could be recovered)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HurPsyExp.Utility.ConvertFromDIU(System.Double,HurPsyLib.HurPsyUnit)" -->
        <!-- Badly formed XML comment ignored for member "M:HurPsyExp.Utility.ConvertToDIU(System.Double,HurPsyLib.HurPsyUnit)" -->
        <member name="T:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs">
            <summary>
            A helper type providing cached, reusable <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instances
            for all properties generated with <see cref="T:CommunityToolkit.Mvvm.ComponentModel.ObservablePropertyAttribute"/>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.TempId">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance for all "TempId" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Selected">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance for all "Selected" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Editable">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance for all "Editable" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ItemObject">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance for all "ItemObject" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Id">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance for all "Id" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Hidden">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance for all "Hidden" generated properties.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs">
            <summary>
            A helper type providing cached, reusable <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instances
            for all properties generated with <see cref="T:CommunityToolkit.Mvvm.ComponentModel.ObservablePropertyAttribute"/>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.TempId">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance for all "TempId" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Selected">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance for all "Selected" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Editable">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance for all "Editable" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ItemObject">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance for all "ItemObject" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Id">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance for all "Id" generated properties.</summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Hidden">
            <summary>The cached <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance for all "Hidden" generated properties.</summary>
        </member>
    </members>
</doc>
